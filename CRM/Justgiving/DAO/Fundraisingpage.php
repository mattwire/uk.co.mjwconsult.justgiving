<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * Generated from xml/schema/CRM/Justgiving/Fundraisingpage.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:e4fe94508ecc7d0e57729758a877098c)
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
/**
 * CRM_Justgiving_DAO_Fundraisingpage constructor.
 */
class CRM_Justgiving_DAO_Fundraisingpage extends CRM_Core_DAO {
  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_justgiving_fundraising_page';
  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Unique CiviCRM FundraisingPage ID (Mapped to reference)
   *
   * @var int unsigned
   */
  public $id;
  /**
   * Justgiving Fundraising Page ID
   *
   * @var int unsigned
   */
  public $page_id;
  /**
   * The charityId argument specifies the charity to create the fundraising page for. (Required)
   *
   * @var int unsigned
   */
  public $charity_id;
  /**
   * The eventId argument specifies the event to create the fundraising page for. This argument must be omitted if an activityType is specified.
   *
   * @var int unsigned
   */
  public $event_id;
  /**
   * The pageShortName argument specifies the url you want to assign the new fundraising page. If the short url is available your page will be available at http://www.justgiving.com/{pageShortName} once it is created. (Required)
   *
   * @var string
   */
  public $page_short_name;
  /**
   * The pageTitle argument allows you to provide a title for the page. (Required)
   *
   * @var string
   */
  public $page_title;
  /**
   * The activityType argument specifies the type of activity the page is for. This argument must be omitted if an eventId is specified. ActivityTypes: Birthday Wedding OtherCelebration InMemory
   *
   * @var string
   */
  public $activity_type;
  /**
   * The targetAmount argument allows you to specify a target amount to raise. (Optional)
   *
   * @var string
   */
  public $target_amount;
  /**
   * The charityOptIn argument allows you to indicate whether the user wishes to opt in to receive communications from the charity the fundraising page is for. (Required)
   *
   * @var int
   */
  public $charity_opt_in;
  /**
   * The eventDate argument allows you to specify when the event will take place. Required for event activity types (i.e: Birthday, Wedding, OtherCelebration, InMemory).
   *
   * @var timestamp
   */
  public $event_date;
  /**
   * The eventName argument allows you to specify a name for the event. Required for event activity types (i.e: Birthday, Wedding, OtherCelebration, InMemory).
   *
   * @var string
   */
  public $event_name;
  /**
   * The attribution argument allows you to specify who the fundraising page is attributed to. Required for occasion, organised event and in-memory activity types (i.e: all except Birthday, Wedding).
   *
   * @var string
   */
  public $attribution;
  /**
   * The charityFunded argument specifies whether the charity is contributing in some way to the fundraising, which can affect Gift Aid. For more information about how Gift Aid works http://bit.ly/cZfY1R (Required)
   *
   * @var int
   */
  public $charity_funded;
  /**
   * The causeId argument specifies the cause you are creating a fundraising page for. (Optional)
   *
   * @var int unsigned
   */
  public $cause_id;
  /**
   * The companyAppealId argument specifies the company appeal you are creating a fundraising page for. (Optional)
   *
   * @var int unsigned
   */
  public $company_appeal_id;
  /**
   * The date the page should expire. This is ignored if you are creating a fundraising page for a pre-defined event.
   *
   * @var timestamp
   */
  public $expiry_date;
  /**
   * The Page Story.
   *
   * @var text
   */
  public $page_story;
  /**
   * The 'I'm doing action X' part of the fundraising page summary. (Optional). 50 characters max.
   *
   * @var string
   */
  public $page_summary_what;
  /**
   * The 'reason Z' part of the fundraising page summary. (Optional). 50 characters max.
   *
   * @var string
   */
  public $page_summary_why;
  /**
   * The teamId argument specifies the team to which the fundraising page will be associated with.
   *
   * @var int unsigned
   */
  public $team_id;
  /**
   * Must be a valid ISO currency code. Will default to GBP if omitted. For a list of valid codes, use the Currency API.
   *
   * @var string
   */
  public $currency;
  /**
   * Error message on page creation
   *
   * @var string
   */
  public $error;
  /**
   * Class constructor.
   */
  function __construct() {
    $this->__table = 'civicrm_justgiving_fundraising_page';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Unique CiviCRM FundraisingPage ID (Mapped to reference)',
          'required' => true,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'page_id' => array(
          'name' => 'page_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Justgiving Fundraising Page ID',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'charity_id' => array(
          'name' => 'charity_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Charity ID') ,
          'description' => 'The charityId argument specifies the charity to create the fundraising page for. (Required)',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'event_id' => array(
          'name' => 'event_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Event ID') ,
          'description' => 'The eventId argument specifies the event to create the fundraising page for. This argument must be omitted if an activityType is specified.',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'page_short_name' => array(
          'name' => 'page_short_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Page Short Name') ,
          'description' => 'The pageShortName argument specifies the url you want to assign the new fundraising page. If the short url is available your page will be available at http://www.justgiving.com/{pageShortName} once it is created. (Required)',
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'page_title' => array(
          'name' => 'page_title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Page Title') ,
          'description' => 'The pageTitle argument allows you to provide a title for the page. (Required)',
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'activity_type' => array(
          'name' => 'activity_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Activity Type') ,
          'description' => 'The activityType argument specifies the type of activity the page is for. This argument must be omitted if an eventId is specified. ActivityTypes: Birthday Wedding OtherCelebration InMemory',
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'target_amount' => array(
          'name' => 'target_amount',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Target Amount') ,
          'description' => 'The targetAmount argument allows you to specify a target amount to raise. (Optional)',
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'charity_opt_in' => array(
          'name' => 'charity_opt_in',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Charity Opt-in') ,
          'description' => 'The charityOptIn argument allows you to indicate whether the user wishes to opt in to receive communications from the charity the fundraising page is for. (Required)',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'event_date' => array(
          'name' => 'event_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Event Date') ,
          'description' => 'The eventDate argument allows you to specify when the event will take place. Required for event activity types (i.e: Birthday, Wedding, OtherCelebration, InMemory).',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'event_name' => array(
          'name' => 'event_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Event Name') ,
          'description' => 'The eventName argument allows you to specify a name for the event. Required for event activity types (i.e: Birthday, Wedding, OtherCelebration, InMemory).',
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'attribution' => array(
          'name' => 'attribution',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Attribution') ,
          'description' => 'The attribution argument allows you to specify who the fundraising page is attributed to. Required for occasion, organised event and in-memory activity types (i.e: all except Birthday, Wedding).',
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'charity_funded' => array(
          'name' => 'charity_funded',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Charity Funded') ,
          'description' => 'The charityFunded argument specifies whether the charity is contributing in some way to the fundraising, which can affect Gift Aid. For more information about how Gift Aid works http://bit.ly/cZfY1R (Required)',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'cause_id' => array(
          'name' => 'cause_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Cause ID') ,
          'description' => 'The causeId argument specifies the cause you are creating a fundraising page for. (Optional)',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'company_appeal_id' => array(
          'name' => 'company_appeal_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Company Appeal ID') ,
          'description' => 'The companyAppealId argument specifies the company appeal you are creating a fundraising page for. (Optional)',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'expiry_date' => array(
          'name' => 'expiry_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Expiry Date') ,
          'description' => 'The date the page should expire. This is ignored if you are creating a fundraising page for a pre-defined event.',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'page_story' => array(
          'name' => 'page_story',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('pageStory') ,
          'description' => 'The Page Story.',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'page_summary_what' => array(
          'name' => 'page_summary_what',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('pageSummaryWhat') ,
          'description' => 'The \'I\'m doing action X\' part of the fundraising page summary. (Optional). 50 characters max.',
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'page_summary_why' => array(
          'name' => 'page_summary_why',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('pageSummaryWhy') ,
          'description' => 'The \'reason Z\' part of the fundraising page summary. (Optional). 50 characters max.',
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'team_id' => array(
          'name' => 'team_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('teamId') ,
          'description' => 'The teamId argument specifies the team to which the fundraising page will be associated with.',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'currency' => array(
          'name' => 'currency',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('currency') ,
          'description' => 'Must be a valid ISO currency code. Will default to GBP if omitted. For a list of valid codes, use the Currency API.',
          'maxlength' => 4,
          'size' => CRM_Utils_Type::FOUR,
          'default' => 'GBP',
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
        'error' => array(
          'name' => 'error',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('error') ,
          'description' => 'Error message on page creation',
          'maxlength' => 512,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_justgiving_fundraising_page',
          'entity' => 'Fundraisingpage',
          'bao' => 'CRM_Justgiving_DAO_Fundraisingpage',
          'localizable' => 0,
        ) ,
      );
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }
  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName() {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog() {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'justgiving_fundraising_page', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'justgiving_fundraising_page', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of indices
   */
  public static function indices($localize = TRUE) {
    $indices = array();
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }
}
